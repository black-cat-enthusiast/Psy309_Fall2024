install.packages(""tinytex"")
install.packages("tinytex")
install.packages("Rtools")
histogram <- hist(d$Score, xlab = "Random value (x)", col = "grey", main = "", cex.lab = 1.5, cex.axis = 1.5) # print out a quick histogram of the data
knitr::include_graphics("Figs/strength.jpg")
# this is the "setup" chunk. Info here will apply to all code blocks in the document.
knitr::opts_chunk$set(echo = TRUE, warning = FALSE,message = FALSE)
# Notes
# text will cause problems
# First example
67 * 88
# Object-oriented programming
a <- 67 * 88 # Assign the result of the function onto the object "a"
# Example 2
b <- c(1,2,3,4,5) # Assign a list onto the object "b"
# Example 3 - DATA FAME
c <- data.frame( # Assign a 2-D data frame onto the object "c"
ID = c(1,2,3,4,5),
Score = c(100,110,90,95,107)
)
set.seed(123) # Beginning of the random process
d <- data.frame(
ID = c(1:100), # 100 IDs
Score = runif(n=100,min=1,max=10) # 100 random scores
)
head(d) # show me the first 6 rows
tail(d) # show me the last 6 rows
histogram <- hist(d$Score, xlab = "Random value (x)", col = "grey", main = "", cex.lab = 1.5, cex.axis = 1.5) # print out a quick histogram of the data
print(histogram)
print(histogram)
histogram
hist(d$Score, xlab = "Random value (x)", col = "grey", main = "", cex.lab = 1.5, cex.axis = 1.5) # print out a quick histogram of the data
devtools::install_github('rstudio/rmarkdown')
install.packages("devtools")
devtools::install_github('rstudio/rmarkdown')
set.seed(123) # Beginning of the random process
d <- data.frame(
ID = c(1:100), # 100 IDs
Score = runif(n=100,min=1,max=10) # 100 random scores
)
head(d) # show me the first 6 rows
tail(d) # show me the last 6 rows
hist(d$Score)
knitr::include_graphics("Figs/strength.jpg")
# this is the "setup" chunk. Info here will apply to all code blocks in the document.
knitr::opts_chunk$set(echo = TRUE, warning = FALSE,message = FALSE)
# Notes
# text will cause problems
# First example
67 * 88
# Object-oriented programming
a <- 67 * 88 # Assign the result of the function onto the object "a"
# Example 2
b <- c(1,2,3,4,5) # Assign a list onto the object "b"
# Example 3 - DATA FAME
c <- data.frame( # Assign a 2-D data frame onto the object "c"
ID = c(1,2,3,4,5),
Score = c(100,110,90,95,107)
)
set.seed(123) # Beginning of the random process
d <- data.frame(
ID = c(1:100), # 100 IDs
Score = runif(n=100,min=1,max=10) # 100 random scores
)
head(d) # show me the first 6 rows
tail(d) # show me the last 6 rows
hist(d$Score)
d %>%
ggplot(aes(x=Score))+
geom_histogram()
library(tidyverse)
d %>%
ggplot(aes(x=Score))+
geom_histogram()
d %>%
ggplot(aes(x=Score))+
geom_histogram()+
theme_classic()
hist(e$Score, xlab = "Random value (x)", col = "grey", main = "", cex.lab = 1.5, cex.axis = 1.5)
e <- data.frame(
ID = c(1:100),
Score = rnorm(n = 100, mean = 100, sd = 15) # sample from normal distribution
)
hist(e$Score, xlab = "Random value (x)", col = "grey", main = "", cex.lab = 1.5, cex.axis = 1.5)
d %>%
ggplot(aes(x=Score))+
geom_histogram(bins = 8)+
theme_classic()
d %>%
ggplot(aes(x=Score))+
geom_histogram(bins = 8,alpha=0.2)+
theme_classic()
d %>%
ggplot(aes(x=Score))+
geom_histogram(bins = 8, alpha=0.2, colour = "black")+
theme_classic()
set.seed(123) # Beginning of the random process
d <- data.frame(
ID = c(1:100), # 100 IDs
Score = runif(n=100,min=1,max=10) # 100 random scores
)
head(d) # show me the first 6 rows
tail(d) # show me the last 6 rows
# Make a quick histogram of the data
library(tidyverse)
# Generate the chart
histogram <- d %>%
ggplot(aes(x=Score))+
geom_histogram(bins = 8, alpha=0.2, colour = "black")+
theme_classic()
# Save the histogram as a high quality .png image
ggsave("Figs/hist_1.png",height = 4, width = 5, dpi = 300)
# Call back the high quality image
knitr::include_graphics("Figs/hist_1.png")
# Generate the chart
histogram <- g %>%
ggplot(aes(x=Score))+
geom_histogram(bins = 8, alpha=0.2, colour = "black")+
theme_classic()+
scale_x_binned(n.breaks = 7)
# Example 1: sample randomly from the values 1:7
f <- data.frame(
ID = c(1:100),
Score = sample(x=c(1:7),size=100,replace = TRUE)
)
# Example 2: set the probabilities for the possible responses
Prob_info <- c(0.02, 0.03, 0.05, 0.1, 0.1, 0.4, 0.4)
g <- data.frame(
ID = c(1:100),
Score = sample(x=c(1:7),size=100,replace = TRUE,prob = Prob_info) # use prob info
)
# Generate the chart
histogram <- g %>%
ggplot(aes(x=Score))+
geom_histogram(bins = 8, alpha=0.2, colour = "black")+
theme_classic()+
scale_x_binned(n.breaks = 7)
# Save the histogram as a high quality .png image
ggsave("Figs/hist_3.png",histogram,height = 3, width = 5, dpi = 300)
# Call back the high quality image
knitr::include_graphics("Figs/hist_3.png")
# Example 1: sample randomly from the values 1:7
f <- data.frame(
ID = c(1:100),
Score = sample(x=c(1:7),size=100,replace = TRUE)
)
# Example 2: set the probabilities for the possible responses
Prob_info <- c(0.02, 0.03, 0.05, 0.1, 0.1, 0.4, 0.4)
g <- data.frame(
ID = c(1:100),
Score = sample(x=c(1:7),size=100,replace = TRUE,prob = Prob_info) # use prob info
)
# Generate the chart
histogram <- g %>%
ggplot(aes(x=Score))+
geom_histogram(bins = 8, alpha=0.2, colour = "black")+
theme_classic()+
scale_x_continuous(breaks=c(1:7))
# Save the histogram as a high quality .png image
ggsave("Figs/hist_3.png",histogram,height = 3, width = 5, dpi = 300)
# Call back the high quality image
knitr::include_graphics("Figs/hist_3.png")
# Generate the chart
histogram <- g %>%
ggplot(aes(x=Score))+
geom_histogram(bins = 7, alpha=0.2, colour = "black")+
theme_classic()+
scale_x_continuous(breaks=c(1:7))
# Example 1: sample randomly from the values 1:7
f <- data.frame(
ID = c(1:100),
Score = sample(x=c(1:7),size=100,replace = TRUE)
)
# Example 2: set the probabilities for the possible responses
Prob_info <- c(0.02, 0.03, 0.05, 0.1, 0.1, 0.4, 0.4)
g <- data.frame(
ID = c(1:100),
Score = sample(x=c(1:7),size=100,replace = TRUE,prob = Prob_info) # use prob info
)
# Generate the chart
histogram <- g %>%
ggplot(aes(x=Score))+
geom_histogram(bins = 7, alpha=0.2, colour = "black")+
theme_classic()+
scale_x_continuous(breaks=c(1:7))
# Save the histogram as a high quality .png image
ggsave("Figs/hist_3.png",histogram,height = 3, width = 5, dpi = 300)
# Call back the high quality image
knitr::include_graphics("Figs/hist_3.png")
knitr::opts_chunk$set(echo = TRUE)
library(tinytable)
tt(res)
library(tinytable)
# Run a one-way ANOVA
res <- aov(data = data, IQ ~ age_cat)
knitr::opts_chunk$set(echo = TRUE)
# Set up how the code chunks will print
knitr::opts_chunk$set(echo = TRUE, # Show the code
warning = FALSE, # Hide the warnings
message = FALSE) # Hide the messages
library(faux)
library(tidyverse)
# Set a consistent start point for "random" data generation
# Makes it so the output will be consistent
set.seed(123) # Can be any value.
# Generate data. Specify the number of rows, number of variables, means for the columns, sd's for the columns, and the correlation between the columns.
data <- rnorm_multi(n = 85, vars = 2, mu = c(65,100), sd = c(10,15), r = -0.3)
# Rename the columns to represent your variables
colnames(data) <- c("Age","IQ")
###### Everything above this point is copy & pasted from practical #4.
# Transform the continuous variable into categories
data$age_cat <- cut(data$Age,
breaks = c(-Inf, 65, Inf), # cut points
labels = c("Under 65", "Over 65")) # labels
head(data) # Check out the data frame with the new column
# A bar graph
a <- data %>%
group_by(age_cat) %>%
summarise(
n=n(),
mean=mean(IQ),
sd=sd(IQ)
) %>% mutate(se=sd / sqrt(n)) %>%
ggplot(aes(x=age_cat,y=mean, colour = age_cat, fill= age_cat, shape=age_cat)) +
geom_bar(stat="identity",alpha=0.2)+
geom_errorbar(aes(x=age_cat,ymin=mean-se,ymax=mean+se),width=0.5)+
geom_jitter(data = data,aes(x=age_cat,y=IQ),height=0, width=0.25, size=3,alpha=0.5)+
scale_colour_manual(values = c("grey","black"))+
scale_fill_manual(values=c("grey","black"))+
theme_classic()+
theme(legend.position = "none")+
theme(plot.title = element_text(hjust=0.5))+
labs(
x="Age Categories",
y="IQ Score",
title="Effect of Age on \n IQ Scores"
)
ggsave("2_bars.png",a,height=4,width=3,dpi=300)
knitr::include_graphics("2_bars.png")
# Levigne's test for equity of variances
var.test(data = data, IQ ~ age_cat)
# A t.test when variances are not unequal
t.test(data = data, IQ ~ age_cat, var.equal = TRUE)
# An example of how to divide the continuous variable into 3 categories
data$age_cat <- cut(data$Age,
breaks = c(-Inf, 60, 70, Inf),
labels = c("Under 60","60-70", "Over 70"))
# Graph for the 3-category data
## Only change vs above is the number of coulours! (Robust!!)
JLB_garph <- data %>% # Assign the chart to an object
group_by(age_cat) %>%
summarise(
n=n(),
mean=mean(IQ),
sd=sd(IQ)
) %>% mutate(se=sd / sqrt(n)) %>%
ggplot(aes(x=age_cat,y=mean, colour = age_cat, fill= age_cat, shape=age_cat)) +
geom_bar(stat="identity",alpha=0.2)+
geom_errorbar(aes(x=age_cat,ymin=mean-se,ymax=mean+se),width=0.5)+
geom_jitter(data = data,aes(x=age_cat,y=IQ),height=0, width=0.25, size=3,alpha=0.5)+
scale_colour_manual(values = c("grey","black","blue"))+
scale_fill_manual(values=c("grey","black","blue"))+
theme_classic()+
theme(legend.position = "none")+
theme(plot.title = element_text(hjust=0.5))+
labs(
x="Age Categories",
y="IQ Score",
title="Effect of Age on \n IQ Scores"
)
# Save a high quality .png copy of the image
ggsave("JLB_prc_5.png",JLB_garph,height=4,width=4,dpi=300)
# Call back the high quality image
knitr::include_graphics("JLB_prc_5.png")
library(tinytable)
# Run a one-way ANOVA
res <- aov(data = data, IQ ~ age_cat)
tt(res)
knitr::include_graphics("Figs/strength.jpg")
knitr::include_graphics("Figs/effect_size.jpg")
# Set up how the code chunks will print
knitr::opts_chunk$set(echo = TRUE, # Show the code
warning = FALSE, # Hide the warnings
message = FALSE) # Hide the messages
# You must install packages before you can use them.
# You only needd to install once per computer.
# install.packages(c("faux","tidyverse")) # Remove leading hashtag to run this line!
# Once the packages are installed, you can load them to your current R session using the library() command
library(faux)
library(tidyverse)
# Set a consistent start point for "random" data generation
# Makes it so the output will be consistent
set.seed(123) # Can be any value.
# Generate data. Specify the number of rows, number of variables, means for the columns, sd's for the columns, and the correlation between the columns.
data <- rnorm_multi(n = 85, vars = 2, mu = c(65,100), sd = c(10,15), r = -0.3)
# Show me the first 6 rows of data:
head(data)
# Rename the columns to represent your variables
colnames(data) <- c("Age","IQ")
# Check the correlation between the two columns
# If you don't like it, play around with the value in set.seed until you are happy.
cor.test(data$Age,data$IQ)
lm(IQ ~ Age, data=data)
summary(res)
# Check the correlation between the two columns
# If you don't like it, play around with the value in set.seed until you are happy.
cor.test(data$Age,data$IQ)
knitr::include_graphics("Figs/strength.jpg")
knitr::include_graphics("Figs/effect_size.jpg")
# Set up how the code chunks will print
knitr::opts_chunk$set(echo = TRUE, # Show the code
warning = FALSE, # Hide the warnings
message = FALSE) # Hide the messages
# You must install packages before you can use them.
# You only needd to install once per computer.
# install.packages(c("faux","tidyverse")) # Remove leading hashtag to run this line!
# Once the packages are installed, you can load them to your current R session using the library() command
library(faux)
library(tidyverse)
# Set a consistent start point for "random" data generation
# Makes it so the output will be consistent
set.seed(123) # Can be any value.
# Generate data. Specify the number of rows, number of variables, means for the columns, sd's for the columns, and the correlation between the columns.
data <- rnorm_multi(n = 85, vars = 2, mu = c(65,100), sd = c(10,15), r = -0.3)
# Show me the first 6 rows of data:
head(data)
# Rename the columns to represent your variables
colnames(data) <- c("Age","IQ")
# Check the correlation between the two columns
# If you don't like it, play around with the value in set.seed until you are happy.
cor.test(data$Age,data$IQ)
res <- lm(IQ ~ Age, data=data)
summary(res)
library(xfun)
install.packages("xfun")
install.packages("xfun")
remove.packages("xfun")
install.packages("xfun", lib = .libPaths()[1])
install.packages("xfun", lib = .libPaths()[1])
packageVersion("xfun")
install.packages("xfun")
packageVersion("xfun")
install.packages("xfun", type = "binary", dependencies = TRUE)
packageVersion("xfun")
